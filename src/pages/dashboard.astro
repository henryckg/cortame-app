---
import Card from "@/components/Card.astro";
import LinkCard from "@/components/LinkCard.astro";
import Layout from "@/layouts/Layout.astro";

import { getUserLinks } from "@/db/client";

const user = await Astro.locals.currentUser();
if (!user) return Astro.redirect("/");

const DOMAIN_URL = Astro.url.hostname.replace(/^www\./, '')

const userId = user.emailAddresses[0]?.emailAddress;
const mockLinks = [
  {
    id: "mdn",
    original: "https://developer.mozilla.org/en-US/",
    visits: 10,
    created_at: new Date().toISOString(),
  },
  {
    id: "ts-github",
    original: "https://github.com/microsoft/TypeScript",
    visits: 25,
    created_at: new Date().toISOString(),
  }
]
const userLinks = import.meta.env.DEV_MODE ? mockLinks : await getUserLinks(userId);
const totalVisits = userLinks.reduce((acc, link) => acc + Number(link.visits ?? 0), 0);
---

<Layout title="Dashboard - Córtame">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-2xl font-bold">Dashboard</h1>
    <!-- <button
      class="bg-emerald-600 hover:bg-emerald-700 transition-all duration-150 cursor-pointer text-white px-4 py-2 text-md rounded-md hover:scale-105"
    >
      + Nuevo Link
    </button> -->
  </div>



  <section class="flex flex-col lg:flex-row gap-8 justify-between mb-12">
    <aside class="flex flex-col justify-between gap-8 w-full lg:w-1/3">
      <Card title="Total de Links" content={userLinks.length} />
      <Card title="Visitas Totales" content={totalVisits} />
      <Card title="Códigos QR Generados" content={userLinks.length} />
    </aside>

    <div class="rounded-md border w-full bg-forest-darker border-forest-dark flex flex-col justify-between px-8 py-4 gap-8">
      <div>
        <h3 class="text-lg font-bold">Crear Nuevo Link</h3>
        <div class="text-gray-400">
          Acorta una URL y opcionalmente genera un código QR
        </div>
      </div>
      <div>
        <form id="url-form" class="space-y-4">
          <div>
            <label class="text-sm font-medium mb-2 block">URL Original</label>
            <input
              placeholder="https://tu-url-larga.com"
              name="original-url"
              class="bg-[#1a2622] border-[#2a3c36] text-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500 focus-visible:rounded-md w-full px-3 py-2"
            />
          </div>
          <div>
            <label class="text-sm font-medium mb-2 block"
              >Alias personalizado (opcional)</label
            >
            <div class="flex flex-col lg:flex-row items-center w-full">
              <span
                class="bg-[#1a2622] border rounded-t-md lg:border-r-0 lg:rounded-md lg:rounded-r-none border-[#2a3c36] px-3 py-2 text-gray-400 w-full lg:w-fit"
              >
                https://{DOMAIN_URL}/
              </span>
              <input
                name="slug"
                placeholder="mi-link"
                class="border border-t-0 rounded-b-md lg:border lg:rounded-md lg:rounded-l-none bg-[#1a2622] border-[#2a3c36] text-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500 focus-visible:rounded-md px-3 py-2 w-full lg:flex-1"
              />
            </div>
          </div>
          <div class="flex items-center space-x-2">
            <input
              type="checkbox"
              id="generate-qr"
              class="accent-emerald-500 cursor-not-allowed"
              disabled
            />
            <label for="generate-qr" class="text-sm">
              Generar código QR
            </label>
          </div>
          <div class="flex items-center space-x-2">
            <input 
              type="checkbox" 
              id="use-ai" 
              class="accent-emerald-500 cursor-not-allowed"
              disabled
            />
            <label for="use-ai" class="text-sm">
              Usar IA para optimizar
            </label>
          </div>
          <button 
            type="submit"
            class="bg-emerald-600 hover:bg-emerald-700 w-full rounded-md py-2 cursor-pointer transition"
          >
            Crear Link
          </button>
        </form>
      </div>
    </div>
  </section>
    
  <section class="mb-8 flex flex-col gap-4">
    
    <div class="flex items-center justify-between">
      <h2 class="text-xl font-bold">Gestionar Links</h2>
      <form>
        <input
          type="text"
          placeholder="Buscar links..."
          class="text-sm py-2 px-4 bg-forest-darker border-forest text-white w-64 focus-visible:ring-emerald-500 font-normal"
        />
      </form>
    </div>

    <aside
      class="bg-forest-darker border rounded-md border-forest w-52 flex justify-between text-gray-400 px-4 py-2 text-sm"
    >
      <button
        class="cursor-not-allowed data-[state=active]:bg-emerald-600 data-[state=active]:text-white"
        >Todos</button
      >
      <button
        class="cursor-not-allowed data-[state=active]:bg-emerald-600 data-[state=active]:text-white"
        >Con QR</button
      >
      <button
        class="cursor-not-allowed data-[state=active]:bg-emerald-600 data-[state=active]:text-white"
        >Con IA</button
      >
    </aside>

    <div class="space-y-4 mb-8">
      {
        userLinks.length < 1 ? (
          <span class="text-center text-gray-400 mt-4 flex justify-center">No hay ningún link creado</span>
        ) : (
        userLinks.map(({ id, original, visits }) => (
          <LinkCard 
            class="bg-forest-darker border-forest text-white" 
            id={id}
            original={original}
            visits={visits}
          />
        )))
      }
    </div>

    <div id="qr-modal" class="hidden fixed inset-0 bg-black/10 backdrop-blur-sm justify-center items-center z-50">
      <div class="bg-forest-darker border border-emerald-700 rounded-lg p-8 max-w-xs w-full shadow-xl text-center relative">
        <button id="qr-close" class="absolute top-4 right-4 text-gray-500 hover:text-emerald-400 text-2xl cursor-pointer transition">&times;</button>
        <h2 class="text-lg mb-4 font-bold">Código QR</h2>
        <div id="qr-svg-container" class="flex justify-center items-center"></div>
      </div>
    </div>
    
  </se>
</Layout>

<script>
  import {toast} from "@pheralb/toast"

  const urlForm = document.querySelector('#url-form')
  const copyButtons = document.querySelectorAll('.copy-btn')
  const deleteButtons = document.querySelectorAll('.delete-btn')
  const qrButtons = document.querySelectorAll('.qr-btn')
  const modalQR = document.querySelector('#qr-modal')
  const closeModal = document.querySelector('#qr-close')
  const qrSvgContainer = document.querySelector('#qr-svg-container')
  

  urlForm?.addEventListener('submit', async (e) => {
    e.preventDefault()

    const formData = new FormData(e.target as HTMLFormElement)
    const originalUrl = formData.get('original-url')
    const slug = formData.get('slug')

    const res = await fetch('/api/shorten', {
      method: 'POST',
      body: JSON.stringify({
        slug,
        url: originalUrl
      }),
      headers: {'Content-Type': 'application/json'}
    })

    if (res.ok) {
      toast.success({
      text: "Link creado",
    })
      setTimeout(() => {
        window.location.reload()
      }, 800)
    } else {
      const errorMessage = await res.json()
      toast.error({
        text: "No se pudo crear el link",
        description: errorMessage
      })
    }

  })

  copyButtons?.forEach((btn) => {
    btn.addEventListener('click', () => {
      const url = btn.getAttribute('data-url')
      if (url) {
        toast.info({
          text: "Link copiado"
        })
        navigator.clipboard.writeText(url)
      }
    })
  })

  deleteButtons?.forEach((btn) => {
    btn.addEventListener('click', async () => {
      const id = btn.getAttribute('data-link') 

      const res = await fetch('/api/delete', {
        method: 'DELETE',
        body: JSON.stringify({
          id
        }),
        headers: {'Content-Type': 'application/json'}
      })

      if (res.ok) {
        toast.success({
          text: "Link eliminado"
        })

        setTimeout(() => {
        window.location.reload()
        }, 800)
      }
    })
  })

  closeModal?.addEventListener('click', () => {
    modalQR?.classList.add('hidden')
    modalQR?.classList.remove('flex')
  })

  qrButtons?.forEach((btn) => {
    btn.addEventListener('click', async () => {
      const id = btn.getAttribute('data-url-id')

      try {
        const res = await fetch(`/api/qr/${id}`)
        const {svg} = await res.json()

        if (svg && qrSvgContainer) {
          qrSvgContainer.innerHTML = svg
          modalQR?.classList.remove('hidden')
          modalQR?.classList.add('flex')
        } else { 
          toast.error({
            text: "No se pudo generar el QR"
          })
        }
      } catch (error) {
        toast.error({
          text: "No se pudo crear el QR",
          description: String(error)
        })
      }
    })
  })
</script>